// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: video/v1/video.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	VideoService_Feed_FullMethodName              = "/video.api.video.v1.VideoService/Feed"
	VideoService_Publish_FullMethodName           = "/video.api.video.v1.VideoService/Publish"
	VideoService_PublishList_FullMethodName       = "/video.api.video.v1.VideoService/PublishList"
	VideoService_WorkCnt_FullMethodName           = "/video.api.video.v1.VideoService/WorkCnt"
	VideoService_FavoriteListByVId_FullMethodName = "/video.api.video.v1.VideoService/FavoriteListByVId"
	VideoService_PublishVidsByAId_FullMethodName  = "/video.api.video.v1.VideoService/PublishVidsByAId"
	VideoService_GetAIdByVId_FullMethodName       = "/video.api.video.v1.VideoService/GetAIdByVId"
)

// VideoServiceClient is the client API for VideoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VideoServiceClient interface {
	Feed(ctx context.Context, in *DouyinFeedRequest, opts ...grpc.CallOption) (*DouyinFeedResponse, error)
	Publish(ctx context.Context, in *DouyinPublishActionRequest, opts ...grpc.CallOption) (*DouyinPublishActionResponse, error)
	PublishList(ctx context.Context, in *DouyinPublishListRequest, opts ...grpc.CallOption) (*DouyinPublishListResponse, error)
	WorkCnt(ctx context.Context, in *WorkCntRequest, opts ...grpc.CallOption) (*WorkCntResponse, error)
	// 通过喜欢视频id列表获取视频列表
	FavoriteListByVId(ctx context.Context, in *FavoriteListReq, opts ...grpc.CallOption) (*FavoriteListResp, error)
	//通过作者id 获取作者的发布视频id列表
	PublishVidsByAId(ctx context.Context, in *PublishVidsByAIdReq, opts ...grpc.CallOption) (*PublishVidsByAIdResp, error)
	//通过视频id获取作者id
	GetAIdByVId(ctx context.Context, in *GetAIdByVIdReq, opts ...grpc.CallOption) (*GetAIdByVIdResp, error)
}

type videoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVideoServiceClient(cc grpc.ClientConnInterface) VideoServiceClient {
	return &videoServiceClient{cc}
}

func (c *videoServiceClient) Feed(ctx context.Context, in *DouyinFeedRequest, opts ...grpc.CallOption) (*DouyinFeedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DouyinFeedResponse)
	err := c.cc.Invoke(ctx, VideoService_Feed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) Publish(ctx context.Context, in *DouyinPublishActionRequest, opts ...grpc.CallOption) (*DouyinPublishActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DouyinPublishActionResponse)
	err := c.cc.Invoke(ctx, VideoService_Publish_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) PublishList(ctx context.Context, in *DouyinPublishListRequest, opts ...grpc.CallOption) (*DouyinPublishListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DouyinPublishListResponse)
	err := c.cc.Invoke(ctx, VideoService_PublishList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) WorkCnt(ctx context.Context, in *WorkCntRequest, opts ...grpc.CallOption) (*WorkCntResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkCntResponse)
	err := c.cc.Invoke(ctx, VideoService_WorkCnt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) FavoriteListByVId(ctx context.Context, in *FavoriteListReq, opts ...grpc.CallOption) (*FavoriteListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FavoriteListResp)
	err := c.cc.Invoke(ctx, VideoService_FavoriteListByVId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) PublishVidsByAId(ctx context.Context, in *PublishVidsByAIdReq, opts ...grpc.CallOption) (*PublishVidsByAIdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublishVidsByAIdResp)
	err := c.cc.Invoke(ctx, VideoService_PublishVidsByAId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) GetAIdByVId(ctx context.Context, in *GetAIdByVIdReq, opts ...grpc.CallOption) (*GetAIdByVIdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAIdByVIdResp)
	err := c.cc.Invoke(ctx, VideoService_GetAIdByVId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VideoServiceServer is the server API for VideoService service.
// All implementations must embed UnimplementedVideoServiceServer
// for forward compatibility
type VideoServiceServer interface {
	Feed(context.Context, *DouyinFeedRequest) (*DouyinFeedResponse, error)
	Publish(context.Context, *DouyinPublishActionRequest) (*DouyinPublishActionResponse, error)
	PublishList(context.Context, *DouyinPublishListRequest) (*DouyinPublishListResponse, error)
	WorkCnt(context.Context, *WorkCntRequest) (*WorkCntResponse, error)
	// 通过喜欢视频id列表获取视频列表
	FavoriteListByVId(context.Context, *FavoriteListReq) (*FavoriteListResp, error)
	//通过作者id 获取作者的发布视频id列表
	PublishVidsByAId(context.Context, *PublishVidsByAIdReq) (*PublishVidsByAIdResp, error)
	//通过视频id获取作者id
	GetAIdByVId(context.Context, *GetAIdByVIdReq) (*GetAIdByVIdResp, error)
	mustEmbedUnimplementedVideoServiceServer()
}

// UnimplementedVideoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVideoServiceServer struct {
}

func (UnimplementedVideoServiceServer) Feed(context.Context, *DouyinFeedRequest) (*DouyinFeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Feed not implemented")
}
func (UnimplementedVideoServiceServer) Publish(context.Context, *DouyinPublishActionRequest) (*DouyinPublishActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedVideoServiceServer) PublishList(context.Context, *DouyinPublishListRequest) (*DouyinPublishListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishList not implemented")
}
func (UnimplementedVideoServiceServer) WorkCnt(context.Context, *WorkCntRequest) (*WorkCntResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WorkCnt not implemented")
}
func (UnimplementedVideoServiceServer) FavoriteListByVId(context.Context, *FavoriteListReq) (*FavoriteListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FavoriteListByVId not implemented")
}
func (UnimplementedVideoServiceServer) PublishVidsByAId(context.Context, *PublishVidsByAIdReq) (*PublishVidsByAIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishVidsByAId not implemented")
}
func (UnimplementedVideoServiceServer) GetAIdByVId(context.Context, *GetAIdByVIdReq) (*GetAIdByVIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAIdByVId not implemented")
}
func (UnimplementedVideoServiceServer) mustEmbedUnimplementedVideoServiceServer() {}

// UnsafeVideoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VideoServiceServer will
// result in compilation errors.
type UnsafeVideoServiceServer interface {
	mustEmbedUnimplementedVideoServiceServer()
}

func RegisterVideoServiceServer(s grpc.ServiceRegistrar, srv VideoServiceServer) {
	s.RegisterService(&VideoService_ServiceDesc, srv)
}

func _VideoService_Feed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DouyinFeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).Feed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoService_Feed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).Feed(ctx, req.(*DouyinFeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DouyinPublishActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoService_Publish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).Publish(ctx, req.(*DouyinPublishActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_PublishList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DouyinPublishListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).PublishList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoService_PublishList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).PublishList(ctx, req.(*DouyinPublishListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_WorkCnt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkCntRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).WorkCnt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoService_WorkCnt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).WorkCnt(ctx, req.(*WorkCntRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_FavoriteListByVId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavoriteListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).FavoriteListByVId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoService_FavoriteListByVId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).FavoriteListByVId(ctx, req.(*FavoriteListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_PublishVidsByAId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishVidsByAIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).PublishVidsByAId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoService_PublishVidsByAId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).PublishVidsByAId(ctx, req.(*PublishVidsByAIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_GetAIdByVId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAIdByVIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).GetAIdByVId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoService_GetAIdByVId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).GetAIdByVId(ctx, req.(*GetAIdByVIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

// VideoService_ServiceDesc is the grpc.ServiceDesc for VideoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VideoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "video.api.video.v1.VideoService",
	HandlerType: (*VideoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Feed",
			Handler:    _VideoService_Feed_Handler,
		},
		{
			MethodName: "Publish",
			Handler:    _VideoService_Publish_Handler,
		},
		{
			MethodName: "PublishList",
			Handler:    _VideoService_PublishList_Handler,
		},
		{
			MethodName: "WorkCnt",
			Handler:    _VideoService_WorkCnt_Handler,
		},
		{
			MethodName: "FavoriteListByVId",
			Handler:    _VideoService_FavoriteListByVId_Handler,
		},
		{
			MethodName: "PublishVidsByAId",
			Handler:    _VideoService_PublishVidsByAId_Handler,
		},
		{
			MethodName: "GetAIdByVId",
			Handler:    _VideoService_GetAIdByVId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "video/v1/video.proto",
}
