// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"relation/internal/biz"
	"relation/internal/conf"
	"relation/internal/data"
	"relation/internal/pkg/rkafka"
	"relation/internal/server"
	"relation/internal/service"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(kafka *conf.Kafka, prometheus *conf.Prometheus, etcd *conf.Etcd, auth *conf.Auth, confService *conf.Service, confServer *conf.Server, confData *conf.Data, logger log.Logger) (*kratos.App, func(), error) {
	registrar, cleanup, err := data.NewRegistrar(etcd, logger)
	if err != nil {
		return nil, nil, err
	}
	db := data.NewDB(confData)
	client := data.NewRedis(confData)
	discovery := data.NewDiscovery(etcd)
	userServiceClient := data.NewUserServiceClient(discovery, confService)
	favoriteServiceClient := data.NewFavoriteClient(discovery, confService)
	commentServiceClient := data.NewCommentClient(discovery, confService)
	videoServiceClient := data.NewVideoClient(discovery, confService)
	messageServiceClient := data.NewMessageClient(discovery, confService)
	reader := rkafka.InitKafkaConsumer(logger, kafka, client)
	dataData, cleanup2, err := data.NewData(logger, db, client, userServiceClient, favoriteServiceClient, commentServiceClient, videoServiceClient, messageServiceClient, reader)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	relationRepo := data.NewRelationRepo(dataData, logger)
	relationUsecase := biz.NewRelationUsecase(relationRepo, logger)
	relationService := service.NewRelationService(relationUsecase, auth, logger)
	grpcServer := server.NewGRPCServer(prometheus, confServer, auth, relationService, logger)
	httpServer := server.NewHTTPServer(confServer, relationService, auth, logger)
	app := newApp(registrar, logger, grpcServer, httpServer)
	return app, func() {
		cleanup2()
		cleanup()
	}, nil
}
