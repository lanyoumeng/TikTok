// Code generated by MockGen. DO NOT EDIT.
// Source: user/internal/biz (interfaces: UserRepo)

// Package mrepo is a generated GoMock package.
package mrepo

import (
	context "context"
	reflect "reflect"
	model "user/internal/pkg/model"

	gomock "github.com/golang/mock/gomock"
)

// MockUserRepo is a mock of UserRepo interface.
type MockUserRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepoMockRecorder
}

// MockUserRepoMockRecorder is the mock recorder for MockUserRepo.
type MockUserRepoMockRecorder struct {
	mock *MockUserRepo
}

// NewMockUserRepo creates a new mock instance.
func NewMockUserRepo(ctrl *gomock.Controller) *MockUserRepo {
	mock := &MockUserRepo{ctrl: ctrl}
	mock.recorder = &MockUserRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepo) EXPECT() *MockUserRepoMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserRepo) CreateUser(arg0 context.Context, arg1 *model.User) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserRepoMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepo)(nil).CreateUser), arg0, arg1)
}

// GetCountById mocks base method.
func (m *MockUserRepo) GetCountById(arg0 context.Context, arg1 int64) (*model.UserCount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountById", arg0, arg1)
	ret0, _ := ret[0].(*model.UserCount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCountById indicates an expected call of GetCountById.
func (mr *MockUserRepoMockRecorder) GetCountById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountById", reflect.TypeOf((*MockUserRepo)(nil).GetCountById), arg0, arg1)
}

// GetUserById mocks base method.
func (m *MockUserRepo) GetUserById(arg0 context.Context, arg1 int64) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", arg0, arg1)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockUserRepoMockRecorder) GetUserById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockUserRepo)(nil).GetUserById), arg0, arg1)
}

// RGetCountById mocks base method.
func (m *MockUserRepo) RGetCountById(arg0 context.Context, arg1 int64) (*model.UserCount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RGetCountById", arg0, arg1)
	ret0, _ := ret[0].(*model.UserCount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RGetCountById indicates an expected call of RGetCountById.
func (mr *MockUserRepoMockRecorder) RGetCountById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RGetCountById", reflect.TypeOf((*MockUserRepo)(nil).RGetCountById), arg0, arg1)
}

// RGetUserById mocks base method.
func (m *MockUserRepo) RGetUserById(arg0 context.Context, arg1 int64) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RGetUserById", arg0, arg1)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RGetUserById indicates an expected call of RGetUserById.
func (mr *MockUserRepoMockRecorder) RGetUserById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RGetUserById", reflect.TypeOf((*MockUserRepo)(nil).RGetUserById), arg0, arg1)
}

// RSaveCount mocks base method.
func (m *MockUserRepo) RSaveCount(arg0 context.Context, arg1 *model.UserCount) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RSaveCount", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RSaveCount indicates an expected call of RSaveCount.
func (mr *MockUserRepoMockRecorder) RSaveCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RSaveCount", reflect.TypeOf((*MockUserRepo)(nil).RSaveCount), arg0, arg1)
}

// RSaveUser mocks base method.
func (m *MockUserRepo) RSaveUser(arg0 context.Context, arg1 *model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RSaveUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RSaveUser indicates an expected call of RSaveUser.
func (mr *MockUserRepoMockRecorder) RSaveUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RSaveUser", reflect.TypeOf((*MockUserRepo)(nil).RSaveUser), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockUserRepo) UpdateUser(arg0 context.Context, arg1 *model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserRepoMockRecorder) UpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserRepo)(nil).UpdateUser), arg0, arg1)
}

// UserByName mocks base method.
func (m *MockUserRepo) UserByName(arg0 context.Context, arg1 string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserByName", arg0, arg1)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserByName indicates an expected call of UserByName.
func (mr *MockUserRepoMockRecorder) UserByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserByName", reflect.TypeOf((*MockUserRepo)(nil).UserByName), arg0, arg1)
}
