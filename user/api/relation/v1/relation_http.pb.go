// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.3
// - protoc             v3.12.4
// source: relation/v1/relation.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationRelationServiceFollowCnt = "/relation.api.relation.v1.RelationService/FollowCnt"
const OperationRelationServiceFriendList = "/relation.api.relation.v1.RelationService/FriendList"
const OperationRelationServiceIsFollow = "/relation.api.relation.v1.RelationService/IsFollow"
const OperationRelationServiceRelation = "/relation.api.relation.v1.RelationService/Relation"
const OperationRelationServiceRelationFollowList = "/relation.api.relation.v1.RelationService/RelationFollowList"
const OperationRelationServiceRelationFollowerList = "/relation.api.relation.v1.RelationService/RelationFollowerList"

type RelationServiceHTTPServer interface {
	// FollowCnt 获取关注与粉丝数量
	FollowCnt(context.Context, *FollowCntRequest) (*FollowCntResponse, error)
	// FriendList 获取好友列表
	FriendList(context.Context, *DouyinRelationFriendListRequest) (*DouyinRelationFriendListResponse, error)
	// IsFollow 根据 userId 和 authorId 查询用户是否关注作者
	IsFollow(context.Context, *IsFollowRequest) (*IsFollowResponse, error)
	// Relation 关注/取消关注操作
	Relation(context.Context, *DouyinRelationActionRequest) (*DouyinRelationActionResponse, error)
	// RelationFollowList 获取关注列表
	RelationFollowList(context.Context, *DouyinRelationFollowListRequest) (*DouyinRelationFollowListResponse, error)
	// RelationFollowerList 获取粉丝列表
	RelationFollowerList(context.Context, *DouyinRelationFollowerListRequest) (*DouyinRelationFollowerListResponse, error)
}

func RegisterRelationServiceHTTPServer(s *http.Server, srv RelationServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/douyin/relation/action", _RelationService_Relation0_HTTP_Handler(srv))
	r.GET("/douyin/relation/follow/list", _RelationService_RelationFollowList0_HTTP_Handler(srv))
	r.GET("/douyin/relation/follower/list", _RelationService_RelationFollowerList0_HTTP_Handler(srv))
	r.GET("/douyin/relation/friend/list", _RelationService_FriendList0_HTTP_Handler(srv))
	r.GET("/douyin/relation/followcnt", _RelationService_FollowCnt0_HTTP_Handler(srv))
	r.GET("/douyin/relation/isfollow", _RelationService_IsFollow0_HTTP_Handler(srv))
}

func _RelationService_Relation0_HTTP_Handler(srv RelationServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DouyinRelationActionRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRelationServiceRelation)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Relation(ctx, req.(*DouyinRelationActionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DouyinRelationActionResponse)
		return ctx.Result(200, reply)
	}
}

func _RelationService_RelationFollowList0_HTTP_Handler(srv RelationServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DouyinRelationFollowListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRelationServiceRelationFollowList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RelationFollowList(ctx, req.(*DouyinRelationFollowListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DouyinRelationFollowListResponse)
		return ctx.Result(200, reply)
	}
}

func _RelationService_RelationFollowerList0_HTTP_Handler(srv RelationServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DouyinRelationFollowerListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRelationServiceRelationFollowerList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RelationFollowerList(ctx, req.(*DouyinRelationFollowerListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DouyinRelationFollowerListResponse)
		return ctx.Result(200, reply)
	}
}

func _RelationService_FriendList0_HTTP_Handler(srv RelationServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DouyinRelationFriendListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRelationServiceFriendList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FriendList(ctx, req.(*DouyinRelationFriendListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DouyinRelationFriendListResponse)
		return ctx.Result(200, reply)
	}
}

func _RelationService_FollowCnt0_HTTP_Handler(srv RelationServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FollowCntRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRelationServiceFollowCnt)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FollowCnt(ctx, req.(*FollowCntRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FollowCntResponse)
		return ctx.Result(200, reply)
	}
}

func _RelationService_IsFollow0_HTTP_Handler(srv RelationServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in IsFollowRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRelationServiceIsFollow)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.IsFollow(ctx, req.(*IsFollowRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*IsFollowResponse)
		return ctx.Result(200, reply)
	}
}

type RelationServiceHTTPClient interface {
	FollowCnt(ctx context.Context, req *FollowCntRequest, opts ...http.CallOption) (rsp *FollowCntResponse, err error)
	FriendList(ctx context.Context, req *DouyinRelationFriendListRequest, opts ...http.CallOption) (rsp *DouyinRelationFriendListResponse, err error)
	IsFollow(ctx context.Context, req *IsFollowRequest, opts ...http.CallOption) (rsp *IsFollowResponse, err error)
	Relation(ctx context.Context, req *DouyinRelationActionRequest, opts ...http.CallOption) (rsp *DouyinRelationActionResponse, err error)
	RelationFollowList(ctx context.Context, req *DouyinRelationFollowListRequest, opts ...http.CallOption) (rsp *DouyinRelationFollowListResponse, err error)
	RelationFollowerList(ctx context.Context, req *DouyinRelationFollowerListRequest, opts ...http.CallOption) (rsp *DouyinRelationFollowerListResponse, err error)
}

type RelationServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewRelationServiceHTTPClient(client *http.Client) RelationServiceHTTPClient {
	return &RelationServiceHTTPClientImpl{client}
}

func (c *RelationServiceHTTPClientImpl) FollowCnt(ctx context.Context, in *FollowCntRequest, opts ...http.CallOption) (*FollowCntResponse, error) {
	var out FollowCntResponse
	pattern := "/douyin/relation/followcnt"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRelationServiceFollowCnt))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RelationServiceHTTPClientImpl) FriendList(ctx context.Context, in *DouyinRelationFriendListRequest, opts ...http.CallOption) (*DouyinRelationFriendListResponse, error) {
	var out DouyinRelationFriendListResponse
	pattern := "/douyin/relation/friend/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRelationServiceFriendList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RelationServiceHTTPClientImpl) IsFollow(ctx context.Context, in *IsFollowRequest, opts ...http.CallOption) (*IsFollowResponse, error) {
	var out IsFollowResponse
	pattern := "/douyin/relation/isfollow"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRelationServiceIsFollow))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RelationServiceHTTPClientImpl) Relation(ctx context.Context, in *DouyinRelationActionRequest, opts ...http.CallOption) (*DouyinRelationActionResponse, error) {
	var out DouyinRelationActionResponse
	pattern := "/douyin/relation/action"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRelationServiceRelation))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RelationServiceHTTPClientImpl) RelationFollowList(ctx context.Context, in *DouyinRelationFollowListRequest, opts ...http.CallOption) (*DouyinRelationFollowListResponse, error) {
	var out DouyinRelationFollowListResponse
	pattern := "/douyin/relation/follow/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRelationServiceRelationFollowList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RelationServiceHTTPClientImpl) RelationFollowerList(ctx context.Context, in *DouyinRelationFollowerListRequest, opts ...http.CallOption) (*DouyinRelationFollowerListResponse, error) {
	var out DouyinRelationFollowerListResponse
	pattern := "/douyin/relation/follower/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRelationServiceRelationFollowerList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
