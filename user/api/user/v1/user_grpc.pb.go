// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: user/v1/user.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserService_Register_FullMethodName          = "/user.v1.UserService/Register"
	UserService_Login_FullMethodName             = "/user.v1.UserService/Login"
	UserService_UserInfo_FullMethodName          = "/user.v1.UserService/UserInfo"
	UserService_UpdateWorkCnt_FullMethodName     = "/user.v1.UserService/UpdateWorkCnt"
	UserService_UpdateFavoriteCnt_FullMethodName = "/user.v1.UserService/UpdateFavoriteCnt"
	UserService_UpdateFollowCnt_FullMethodName   = "/user.v1.UserService/UpdateFollowCnt"
	UserService_UserInfoList_FullMethodName      = "/user.v1.UserService/UserInfoList"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	// 用户注册
	Register(ctx context.Context, in *UserRegisterRequest, opts ...grpc.CallOption) (*UserRegisterResponse, error)
	// 用户登录，有 Redis
	Login(ctx context.Context, in *UserLoginRequest, opts ...grpc.CallOption) (*UserLoginResponse, error)
	// 获取用户信息，有 Redis，user + cnt
	// 注意 is_follow 字段默认值，需要其他服务调用 favorite 服务取得
	UserInfo(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error)
	// 更新计数
	// 更新作品数量
	UpdateWorkCnt(ctx context.Context, in *UpdateWorkCntRequest, opts ...grpc.CallOption) (*UpdateWorkCntResponse, error)
	// 更新点赞数量
	// FavoriteCount 和 TotalFavorited
	UpdateFavoriteCnt(ctx context.Context, in *UpdateFavoriteCntRequest, opts ...grpc.CallOption) (*UpdateFavoriteCntResponse, error)
	// 更新关注数量
	// FollowCount 和 FollowerCount
	UpdateFollowCnt(ctx context.Context, in *UpdateFollowCntRequest, opts ...grpc.CallOption) (*UpdateFollowCntResponse, error)
	// 获取用户信息列表，使用用户 ID 列表查询
	UserInfoList(ctx context.Context, in *UserInfoListrRequest, opts ...grpc.CallOption) (*UserInfoListResponse, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) Register(ctx context.Context, in *UserRegisterRequest, opts ...grpc.CallOption) (*UserRegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserRegisterResponse)
	err := c.cc.Invoke(ctx, UserService_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Login(ctx context.Context, in *UserLoginRequest, opts ...grpc.CallOption) (*UserLoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserLoginResponse)
	err := c.cc.Invoke(ctx, UserService_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserInfo(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, UserService_UserInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateWorkCnt(ctx context.Context, in *UpdateWorkCntRequest, opts ...grpc.CallOption) (*UpdateWorkCntResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateWorkCntResponse)
	err := c.cc.Invoke(ctx, UserService_UpdateWorkCnt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateFavoriteCnt(ctx context.Context, in *UpdateFavoriteCntRequest, opts ...grpc.CallOption) (*UpdateFavoriteCntResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateFavoriteCntResponse)
	err := c.cc.Invoke(ctx, UserService_UpdateFavoriteCnt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateFollowCnt(ctx context.Context, in *UpdateFollowCntRequest, opts ...grpc.CallOption) (*UpdateFollowCntResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateFollowCntResponse)
	err := c.cc.Invoke(ctx, UserService_UpdateFollowCnt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserInfoList(ctx context.Context, in *UserInfoListrRequest, opts ...grpc.CallOption) (*UserInfoListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserInfoListResponse)
	err := c.cc.Invoke(ctx, UserService_UserInfoList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility.
type UserServiceServer interface {
	// 用户注册
	Register(context.Context, *UserRegisterRequest) (*UserRegisterResponse, error)
	// 用户登录，有 Redis
	Login(context.Context, *UserLoginRequest) (*UserLoginResponse, error)
	// 获取用户信息，有 Redis，user + cnt
	// 注意 is_follow 字段默认值，需要其他服务调用 favorite 服务取得
	UserInfo(context.Context, *UserRequest) (*UserResponse, error)
	// 更新计数
	// 更新作品数量
	UpdateWorkCnt(context.Context, *UpdateWorkCntRequest) (*UpdateWorkCntResponse, error)
	// 更新点赞数量
	// FavoriteCount 和 TotalFavorited
	UpdateFavoriteCnt(context.Context, *UpdateFavoriteCntRequest) (*UpdateFavoriteCntResponse, error)
	// 更新关注数量
	// FollowCount 和 FollowerCount
	UpdateFollowCnt(context.Context, *UpdateFollowCntRequest) (*UpdateFollowCntResponse, error)
	// 获取用户信息列表，使用用户 ID 列表查询
	UserInfoList(context.Context, *UserInfoListrRequest) (*UserInfoListResponse, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserServiceServer struct{}

func (UnimplementedUserServiceServer) Register(context.Context, *UserRegisterRequest) (*UserRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedUserServiceServer) Login(context.Context, *UserLoginRequest) (*UserLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedUserServiceServer) UserInfo(context.Context, *UserRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserInfo not implemented")
}
func (UnimplementedUserServiceServer) UpdateWorkCnt(context.Context, *UpdateWorkCntRequest) (*UpdateWorkCntResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWorkCnt not implemented")
}
func (UnimplementedUserServiceServer) UpdateFavoriteCnt(context.Context, *UpdateFavoriteCntRequest) (*UpdateFavoriteCntResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFavoriteCnt not implemented")
}
func (UnimplementedUserServiceServer) UpdateFollowCnt(context.Context, *UpdateFollowCntRequest) (*UpdateFollowCntResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFollowCnt not implemented")
}
func (UnimplementedUserServiceServer) UserInfoList(context.Context, *UserInfoListrRequest) (*UserInfoListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserInfoList not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}
func (UnimplementedUserServiceServer) testEmbeddedByValue()                     {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	// If the following call pancis, it indicates UnimplementedUserServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Register(ctx, req.(*UserRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Login(ctx, req.(*UserLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserInfo(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateWorkCnt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWorkCntRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateWorkCnt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateWorkCnt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateWorkCnt(ctx, req.(*UpdateWorkCntRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateFavoriteCnt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFavoriteCntRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateFavoriteCnt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateFavoriteCnt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateFavoriteCnt(ctx, req.(*UpdateFavoriteCntRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateFollowCnt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFollowCntRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateFollowCnt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateFollowCnt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateFollowCnt(ctx, req.(*UpdateFollowCntRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserInfoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoListrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserInfoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserInfoList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserInfoList(ctx, req.(*UserInfoListrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.v1.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _UserService_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _UserService_Login_Handler,
		},
		{
			MethodName: "UserInfo",
			Handler:    _UserService_UserInfo_Handler,
		},
		{
			MethodName: "UpdateWorkCnt",
			Handler:    _UserService_UpdateWorkCnt_Handler,
		},
		{
			MethodName: "UpdateFavoriteCnt",
			Handler:    _UserService_UpdateFavoriteCnt_Handler,
		},
		{
			MethodName: "UpdateFollowCnt",
			Handler:    _UserService_UpdateFollowCnt_Handler,
		},
		{
			MethodName: "UserInfoList",
			Handler:    _UserService_UserInfoList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user/v1/user.proto",
}
