// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v3.12.4
// source: favorite/v1/favorite.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationFavoriteServiceFavorite = "/favorite.api.favorite.v1.FavoriteService/Favorite"
const OperationFavoriteServiceFavoriteList = "/favorite.api.favorite.v1.FavoriteService/FavoriteList"
const OperationFavoriteServiceGetFavoriteCntByUId = "/favorite.api.favorite.v1.FavoriteService/GetFavoriteCntByUId"
const OperationFavoriteServiceGetFavoriteCntByVId = "/favorite.api.favorite.v1.FavoriteService/GetFavoriteCntByVId"
const OperationFavoriteServiceGetIsFavorite = "/favorite.api.favorite.v1.FavoriteService/GetIsFavorite"

type FavoriteServiceHTTPServer interface {
	// Favorite 点赞/取消点赞
	// 登录用户才能点赞
	Favorite(context.Context, *DouyinFavoriteActionRequest) (*DouyinFavoriteActionResponse, error)
	// FavoriteList 获取用户点赞视频列表
	FavoriteList(context.Context, *DouyinFavoriteListRequest) (*DouyinFavoriteListResponse, error)
	// GetFavoriteCntByUId 获取用户的获赞数和点赞数量
	GetFavoriteCntByUId(context.Context, *GetFavoriteCntByUIdRequest) (*GetFavoriteCntByUIdResponse, error)
	// GetFavoriteCntByVId 获取视频的获赞数
	GetFavoriteCntByVId(context.Context, *GetFavoriteCntByVIdRequest) (*GetFavoriteCntByVIdResponse, error)
	// GetIsFavorite 是否喜欢视频
	GetIsFavorite(context.Context, *GetIsFavoriteRequest) (*GetIsFavoriteResponse, error)
}

func RegisterFavoriteServiceHTTPServer(s *http.Server, srv FavoriteServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/douyin/favorite/action", _FavoriteService_Favorite0_HTTP_Handler(srv))
	r.GET("/douyin/favorite/list", _FavoriteService_FavoriteList0_HTTP_Handler(srv))
	r.GET("/douyin/favorite/count/video", _FavoriteService_GetFavoriteCntByVId0_HTTP_Handler(srv))
	r.GET("/douyin/favorite/is_favorite", _FavoriteService_GetIsFavorite0_HTTP_Handler(srv))
	r.GET("/douyin/favorite/count/user", _FavoriteService_GetFavoriteCntByUId0_HTTP_Handler(srv))
}

func _FavoriteService_Favorite0_HTTP_Handler(srv FavoriteServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DouyinFavoriteActionRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFavoriteServiceFavorite)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Favorite(ctx, req.(*DouyinFavoriteActionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DouyinFavoriteActionResponse)
		return ctx.Result(200, reply)
	}
}

func _FavoriteService_FavoriteList0_HTTP_Handler(srv FavoriteServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DouyinFavoriteListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFavoriteServiceFavoriteList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FavoriteList(ctx, req.(*DouyinFavoriteListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DouyinFavoriteListResponse)
		return ctx.Result(200, reply)
	}
}

func _FavoriteService_GetFavoriteCntByVId0_HTTP_Handler(srv FavoriteServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetFavoriteCntByVIdRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFavoriteServiceGetFavoriteCntByVId)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetFavoriteCntByVId(ctx, req.(*GetFavoriteCntByVIdRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetFavoriteCntByVIdResponse)
		return ctx.Result(200, reply)
	}
}

func _FavoriteService_GetIsFavorite0_HTTP_Handler(srv FavoriteServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetIsFavoriteRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFavoriteServiceGetIsFavorite)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetIsFavorite(ctx, req.(*GetIsFavoriteRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetIsFavoriteResponse)
		return ctx.Result(200, reply)
	}
}

func _FavoriteService_GetFavoriteCntByUId0_HTTP_Handler(srv FavoriteServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetFavoriteCntByUIdRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFavoriteServiceGetFavoriteCntByUId)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetFavoriteCntByUId(ctx, req.(*GetFavoriteCntByUIdRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetFavoriteCntByUIdResponse)
		return ctx.Result(200, reply)
	}
}

type FavoriteServiceHTTPClient interface {
	Favorite(ctx context.Context, req *DouyinFavoriteActionRequest, opts ...http.CallOption) (rsp *DouyinFavoriteActionResponse, err error)
	FavoriteList(ctx context.Context, req *DouyinFavoriteListRequest, opts ...http.CallOption) (rsp *DouyinFavoriteListResponse, err error)
	GetFavoriteCntByUId(ctx context.Context, req *GetFavoriteCntByUIdRequest, opts ...http.CallOption) (rsp *GetFavoriteCntByUIdResponse, err error)
	GetFavoriteCntByVId(ctx context.Context, req *GetFavoriteCntByVIdRequest, opts ...http.CallOption) (rsp *GetFavoriteCntByVIdResponse, err error)
	GetIsFavorite(ctx context.Context, req *GetIsFavoriteRequest, opts ...http.CallOption) (rsp *GetIsFavoriteResponse, err error)
}

type FavoriteServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewFavoriteServiceHTTPClient(client *http.Client) FavoriteServiceHTTPClient {
	return &FavoriteServiceHTTPClientImpl{client}
}

func (c *FavoriteServiceHTTPClientImpl) Favorite(ctx context.Context, in *DouyinFavoriteActionRequest, opts ...http.CallOption) (*DouyinFavoriteActionResponse, error) {
	var out DouyinFavoriteActionResponse
	pattern := "/douyin/favorite/action"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationFavoriteServiceFavorite))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *FavoriteServiceHTTPClientImpl) FavoriteList(ctx context.Context, in *DouyinFavoriteListRequest, opts ...http.CallOption) (*DouyinFavoriteListResponse, error) {
	var out DouyinFavoriteListResponse
	pattern := "/douyin/favorite/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationFavoriteServiceFavoriteList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *FavoriteServiceHTTPClientImpl) GetFavoriteCntByUId(ctx context.Context, in *GetFavoriteCntByUIdRequest, opts ...http.CallOption) (*GetFavoriteCntByUIdResponse, error) {
	var out GetFavoriteCntByUIdResponse
	pattern := "/douyin/favorite/count/user"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationFavoriteServiceGetFavoriteCntByUId))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *FavoriteServiceHTTPClientImpl) GetFavoriteCntByVId(ctx context.Context, in *GetFavoriteCntByVIdRequest, opts ...http.CallOption) (*GetFavoriteCntByVIdResponse, error) {
	var out GetFavoriteCntByVIdResponse
	pattern := "/douyin/favorite/count/video"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationFavoriteServiceGetFavoriteCntByVId))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *FavoriteServiceHTTPClientImpl) GetIsFavorite(ctx context.Context, in *GetIsFavoriteRequest, opts ...http.CallOption) (*GetIsFavoriteResponse, error) {
	var out GetIsFavoriteResponse
	pattern := "/douyin/favorite/is_favorite"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationFavoriteServiceGetIsFavorite))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
