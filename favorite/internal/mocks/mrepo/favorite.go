// Code generated by MockGen. DO NOT EDIT.
// Source: favorite/internal/biz (interfaces: FavoriteRepo)

// Package mrepo is a generated GoMock package.
package mrepo

import (
	context "context"
	v1 "favorite/api/video/v1"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFavoriteRepo is a mock of FavoriteRepo interface.
type MockFavoriteRepo struct {
	ctrl     *gomock.Controller
	recorder *MockFavoriteRepoMockRecorder
}

// MockFavoriteRepoMockRecorder is the mock recorder for MockFavoriteRepo.
type MockFavoriteRepoMockRecorder struct {
	mock *MockFavoriteRepo
}

// NewMockFavoriteRepo creates a new mock instance.
func NewMockFavoriteRepo(ctrl *gomock.Controller) *MockFavoriteRepo {
	mock := &MockFavoriteRepo{ctrl: ctrl}
	mock.recorder = &MockFavoriteRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFavoriteRepo) EXPECT() *MockFavoriteRepoMockRecorder {
	return m.recorder
}

// FavoriteAction mocks base method.
func (m *MockFavoriteRepo) FavoriteAction(arg0 context.Context, arg1, arg2, arg3, arg4 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FavoriteAction", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// FavoriteAction indicates an expected call of FavoriteAction.
func (mr *MockFavoriteRepoMockRecorder) FavoriteAction(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FavoriteAction", reflect.TypeOf((*MockFavoriteRepo)(nil).FavoriteAction), arg0, arg1, arg2, arg3, arg4)
}

// FavoriteList mocks base method.
func (m *MockFavoriteRepo) FavoriteList(arg0 context.Context, arg1 int64) ([]*v1.Video, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FavoriteList", arg0, arg1)
	ret0, _ := ret[0].([]*v1.Video)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FavoriteList indicates an expected call of FavoriteList.
func (mr *MockFavoriteRepoMockRecorder) FavoriteList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FavoriteList", reflect.TypeOf((*MockFavoriteRepo)(nil).FavoriteList), arg0, arg1)
}

// GetAuthorIdByVideoId mocks base method.
func (m *MockFavoriteRepo) GetAuthorIdByVideoId(arg0 context.Context, arg1 int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorIdByVideoId", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorIdByVideoId indicates an expected call of GetAuthorIdByVideoId.
func (mr *MockFavoriteRepoMockRecorder) GetAuthorIdByVideoId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorIdByVideoId", reflect.TypeOf((*MockFavoriteRepo)(nil).GetAuthorIdByVideoId), arg0, arg1)
}

// GetFavoriteCntByUId mocks base method.
func (m *MockFavoriteRepo) GetFavoriteCntByUId(arg0 context.Context, arg1 int64) (int64, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFavoriteCntByUId", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetFavoriteCntByUId indicates an expected call of GetFavoriteCntByUId.
func (mr *MockFavoriteRepoMockRecorder) GetFavoriteCntByUId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFavoriteCntByUId", reflect.TypeOf((*MockFavoriteRepo)(nil).GetFavoriteCntByUId), arg0, arg1)
}

// GetFavoriteCntByVId mocks base method.
func (m *MockFavoriteRepo) GetFavoriteCntByVId(arg0 context.Context, arg1 int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFavoriteCntByVId", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFavoriteCntByVId indicates an expected call of GetFavoriteCntByVId.
func (mr *MockFavoriteRepoMockRecorder) GetFavoriteCntByVId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFavoriteCntByVId", reflect.TypeOf((*MockFavoriteRepo)(nil).GetFavoriteCntByVId), arg0, arg1)
}

// IsFavorite mocks base method.
func (m *MockFavoriteRepo) IsFavorite(arg0 context.Context, arg1, arg2 int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFavorite", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsFavorite indicates an expected call of IsFavorite.
func (mr *MockFavoriteRepoMockRecorder) IsFavorite(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFavorite", reflect.TypeOf((*MockFavoriteRepo)(nil).IsFavorite), arg0, arg1, arg2)
}
