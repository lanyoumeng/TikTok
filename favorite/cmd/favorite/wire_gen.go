// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"favorite/internal/biz"
	"favorite/internal/conf"
	"favorite/internal/data"
	"favorite/internal/pkg/favkafka"
	"favorite/internal/server"
	"favorite/internal/service"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(kafka *conf.Kafka, confService *conf.Service, prometheus *conf.Prometheus, etcd *conf.Etcd, auth *conf.Auth, confServer *conf.Server, confData *conf.Data, logger log.Logger) (*kratos.App, func(), error) {
	registrar, cleanup, err := data.NewRegistrar(etcd, logger)
	if err != nil {
		return nil, nil, err
	}
	db := data.NewDB(confData)
	client := data.NewRedis(confData)
	discovery := data.NewDiscovery(etcd)
	userServiceClient := data.NewUserServiceClient(discovery, confService)
	videoServiceClient := data.NewVideoServiceClient(discovery, confService)
	reader := favkafka.InitKafkaConsumer(logger, kafka, client, videoServiceClient)
	dataData, cleanup2, err := data.NewData(confData, logger, db, client, userServiceClient, videoServiceClient, reader)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	favoriteRepo := data.NewBizFavoriteRepo(dataData, logger)
	favoriteUsecase := biz.NewFavoriteUsecase(favoriteRepo, logger)
	favoriteService := service.NewFavoriteService(favoriteUsecase, auth, logger)
	grpcServer := server.NewGRPCServer(prometheus, confServer, auth, favoriteService, logger)
	app := newApp(registrar, logger, grpcServer)
	return app, func() {
		cleanup2()
		cleanup()
	}, nil
}
