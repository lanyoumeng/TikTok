syntax = "proto3";

package user.v1;

option go_package = "user/api/user/v1;v1";

import "google/api/annotations.proto";

service UserService {
    // 用户注册
    rpc Register(UserRegisterRequest) returns (UserRegisterResponse) {
        option (google.api.http) = {
            post: "/douyin/user/register"
            body: "*"
        };
    }

    // 用户登录，有 Redis
    rpc Login(UserLoginRequest) returns (UserLoginResponse) {
        option (google.api.http) = {
            post: "/douyin/user/login"
            body: "*"
        };
    }

    // 获取用户信息，有 Redis，user + cnt
    // 注意 is_follow 字段默认值，需要其他服务调用 favorite 服务取得
    rpc UserInfo(UserRequest) returns (UserResponse) {
        option (google.api.http) = {
            get: "/douyin/user"
        };
    }

    // 更新计数
    // 更新作品数量
    rpc UpdateWorkCnt(UpdateWorkCntRequest) returns (UpdateWorkCntResponse) {
        option (google.api.http) = {
            post: "/douyin/user/update_work_count"
            body: "*"
        };
    }

    // 更新点赞数量
    // FavoriteCount 和 TotalFavorited
    rpc UpdateFavoriteCnt(UpdateFavoriteCntRequest) returns (UpdateFavoriteCntResponse) {
        option (google.api.http) = {
            post: "/douyin/user/update_favorite_count"
            body: "*"
        };
    }

    // 更新关注数量
    // FollowCount 和 FollowerCount
    rpc UpdateFollowCnt(UpdateFollowCntRequest) returns (UpdateFollowCntResponse) {
        option (google.api.http) = {
            post: "/douyin/user/update_follow_count"
            body: "*"
        };
    }

    // 获取用户信息列表，使用用户 ID 列表查询
    rpc UserInfoList(UserInfoListrRequest) returns (UserInfoListResponse) {
        option (google.api.http) = {
            post: "/douyin/user/list"
            body: "*"
        };
    }
}

message User {
    int64 id = 1 [json_name = "id"]; // 用户id
    string name = 2 [json_name = "name"]; // 用户名称
    int64 follow_count = 3 [json_name = "follow_count"]; // 关注总数
    int64 follower_count = 4 [json_name = "follower_count"]; // 粉丝总数
    bool is_follow = 5 [json_name = "is_follow"]; // true-已关注，false-未关注
    string avatar = 6 [json_name = "avatar"]; // 用户头像
    string background_image = 7 [json_name = "background_image"]; // 用户个人页顶部大图
    string signature = 8 [json_name = "signature"]; // 个人简介
    int64 total_favorited = 9 [json_name = "total_favorited"]; // 获赞数量
    int64 work_count = 10 [json_name = "work_count"]; // 作品数量
    int64 favorite_count = 11 [json_name = "favorite_count"]; // 点赞数量
}

message UserRegisterRequest {
    string username = 1; // 注册用户名，最长32个字符
    string password = 2; // 密码，最长32个字符
}

message UserRegisterResponse {
    int32 status_code = 1 [json_name = "status_code"]; // 状态码，0-成功，其他值-失败
    string status_msg = 2 [json_name = "status_msg"];   // 返回状态描述
    int64 user_id = 3 [json_name = "user_id"];          // 用户id
    string token = 4 [json_name = "token"];             // 用户鉴权token
}


message UserLoginRequest {
    string username = 1; // 登录用户名
    string password = 2; // 登录密码
}

message UserLoginResponse {
    int32 status_code = 1 [json_name = "status_code"] ; // 状态码，0-成功，其他值-失败
    string status_msg = 2[json_name = "status_msg"] ; // 返回状态描述
    int64 user_id = 3[json_name = "user_id"] ; // 用户id
    string token = 4[json_name = "token"] ; // 用户鉴权token
}

message UserRequest {
    string user_id = 1; // 用户id
    string token = 2; // 用户鉴权token
}

message UserResponse {
    int32 status_code = 1  [json_name = "status_code"] ;  // 状态码，0-成功，其他值-失败
    string status_msg = 2 [json_name = "status_msg"]     ; // 返回状态描述
    User user = 3 [json_name = "user"]; // 用户信息
}

message UpdateWorkCntRequest {
    string user_id = 1; // 用户id
    int64 work_count = 2; // 作品数量
}

message UpdateWorkCntResponse {
    int32 status_code = 1; // 状态码，0-成功，其他值-失败
    string status_msg = 2; // 返回状态描述
}

message UpdateFavoriteCntRequest {
    string favorite_user_id = 1; // 点赞用户id
    string favorited_user_id = 2; // 获赞用户id
    int64 favorite_count = 3; // 点赞数量
    int64 total_favorited = 4; // 获赞数量
}

message UpdateFavoriteCntResponse {
    int32 status_code = 1; // 状态码，0-成功，其他值-失败
    string status_msg = 2; // 返回状态描述
}

message UpdateFollowCntRequest {
    string follow_user_id = 1; // 执行关注用户id
    string followed_user_id = 2; // 被关注用户id
    int64 follow_count = 3; // 关注数量
    int64 follower_count = 4; // 粉丝数量
}

message UpdateFollowCntResponse {
    int32 status_code = 1; // 状态码，0-成功，其他值-失败
    string status_msg = 2; // 返回状态描述
}

message UserInfoListrRequest {
    repeated int64 userId = 1; // 用户id列表
}

message UserInfoListResponse {
    int32 status_code = 1; // 状态码，0-成功，其他值-失败
    string status_msg = 2; // 返回状态描述
    repeated User users = 3; // 用户信息列表
}
