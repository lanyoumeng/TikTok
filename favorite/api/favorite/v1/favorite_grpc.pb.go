// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: favorite/v1/favorite.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	FavoriteService_Favorite_FullMethodName            = "/favorite.api.favorite.v1.FavoriteService/Favorite"
	FavoriteService_FavoriteList_FullMethodName        = "/favorite.api.favorite.v1.FavoriteService/FavoriteList"
	FavoriteService_GetFavoriteCntByVId_FullMethodName = "/favorite.api.favorite.v1.FavoriteService/GetFavoriteCntByVId"
	FavoriteService_GetIsFavorite_FullMethodName       = "/favorite.api.favorite.v1.FavoriteService/GetIsFavorite"
	FavoriteService_GetFavoriteCntByUId_FullMethodName = "/favorite.api.favorite.v1.FavoriteService/GetFavoriteCntByUId"
)

// FavoriteServiceClient is the client API for FavoriteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FavoriteServiceClient interface {
	// 点赞/取消点赞
	// 登录用户才能点赞
	Favorite(ctx context.Context, in *DouyinFavoriteActionRequest, opts ...grpc.CallOption) (*DouyinFavoriteActionResponse, error)
	// 获取用户点赞视频列表
	FavoriteList(ctx context.Context, in *DouyinFavoriteListRequest, opts ...grpc.CallOption) (*DouyinFavoriteListResponse, error)
	// 视频的获赞数
	GetFavoriteCntByVId(ctx context.Context, in *GetFavoriteCntByVIdRequest, opts ...grpc.CallOption) (*GetFavoriteCntByVIdResponse, error)
	// 是否喜欢
	GetIsFavorite(ctx context.Context, in *GetIsFavoriteRequest, opts ...grpc.CallOption) (*GetIsFavoriteResponse, error)
	// 获取 用户的 获赞数TotalFavorited 和 点赞数量FavoriteCount
	GetFavoriteCntByUId(ctx context.Context, in *GetFavoriteCntByUIdRequest, opts ...grpc.CallOption) (*GetFavoriteCntByUIdResponse, error)
}

type favoriteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFavoriteServiceClient(cc grpc.ClientConnInterface) FavoriteServiceClient {
	return &favoriteServiceClient{cc}
}

func (c *favoriteServiceClient) Favorite(ctx context.Context, in *DouyinFavoriteActionRequest, opts ...grpc.CallOption) (*DouyinFavoriteActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DouyinFavoriteActionResponse)
	err := c.cc.Invoke(ctx, FavoriteService_Favorite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *favoriteServiceClient) FavoriteList(ctx context.Context, in *DouyinFavoriteListRequest, opts ...grpc.CallOption) (*DouyinFavoriteListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DouyinFavoriteListResponse)
	err := c.cc.Invoke(ctx, FavoriteService_FavoriteList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *favoriteServiceClient) GetFavoriteCntByVId(ctx context.Context, in *GetFavoriteCntByVIdRequest, opts ...grpc.CallOption) (*GetFavoriteCntByVIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFavoriteCntByVIdResponse)
	err := c.cc.Invoke(ctx, FavoriteService_GetFavoriteCntByVId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *favoriteServiceClient) GetIsFavorite(ctx context.Context, in *GetIsFavoriteRequest, opts ...grpc.CallOption) (*GetIsFavoriteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetIsFavoriteResponse)
	err := c.cc.Invoke(ctx, FavoriteService_GetIsFavorite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *favoriteServiceClient) GetFavoriteCntByUId(ctx context.Context, in *GetFavoriteCntByUIdRequest, opts ...grpc.CallOption) (*GetFavoriteCntByUIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFavoriteCntByUIdResponse)
	err := c.cc.Invoke(ctx, FavoriteService_GetFavoriteCntByUId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FavoriteServiceServer is the server API for FavoriteService service.
// All implementations must embed UnimplementedFavoriteServiceServer
// for forward compatibility
type FavoriteServiceServer interface {
	// 点赞/取消点赞
	// 登录用户才能点赞
	Favorite(context.Context, *DouyinFavoriteActionRequest) (*DouyinFavoriteActionResponse, error)
	// 获取用户点赞视频列表
	FavoriteList(context.Context, *DouyinFavoriteListRequest) (*DouyinFavoriteListResponse, error)
	// 视频的获赞数
	GetFavoriteCntByVId(context.Context, *GetFavoriteCntByVIdRequest) (*GetFavoriteCntByVIdResponse, error)
	// 是否喜欢
	GetIsFavorite(context.Context, *GetIsFavoriteRequest) (*GetIsFavoriteResponse, error)
	// 获取 用户的 获赞数TotalFavorited 和 点赞数量FavoriteCount
	GetFavoriteCntByUId(context.Context, *GetFavoriteCntByUIdRequest) (*GetFavoriteCntByUIdResponse, error)
	mustEmbedUnimplementedFavoriteServiceServer()
}

// UnimplementedFavoriteServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFavoriteServiceServer struct {
}

func (UnimplementedFavoriteServiceServer) Favorite(context.Context, *DouyinFavoriteActionRequest) (*DouyinFavoriteActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Favorite not implemented")
}
func (UnimplementedFavoriteServiceServer) FavoriteList(context.Context, *DouyinFavoriteListRequest) (*DouyinFavoriteListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FavoriteList not implemented")
}
func (UnimplementedFavoriteServiceServer) GetFavoriteCntByVId(context.Context, *GetFavoriteCntByVIdRequest) (*GetFavoriteCntByVIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFavoriteCntByVId not implemented")
}
func (UnimplementedFavoriteServiceServer) GetIsFavorite(context.Context, *GetIsFavoriteRequest) (*GetIsFavoriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIsFavorite not implemented")
}
func (UnimplementedFavoriteServiceServer) GetFavoriteCntByUId(context.Context, *GetFavoriteCntByUIdRequest) (*GetFavoriteCntByUIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFavoriteCntByUId not implemented")
}
func (UnimplementedFavoriteServiceServer) mustEmbedUnimplementedFavoriteServiceServer() {}

// UnsafeFavoriteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FavoriteServiceServer will
// result in compilation errors.
type UnsafeFavoriteServiceServer interface {
	mustEmbedUnimplementedFavoriteServiceServer()
}

func RegisterFavoriteServiceServer(s grpc.ServiceRegistrar, srv FavoriteServiceServer) {
	s.RegisterService(&FavoriteService_ServiceDesc, srv)
}

func _FavoriteService_Favorite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DouyinFavoriteActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FavoriteServiceServer).Favorite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FavoriteService_Favorite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FavoriteServiceServer).Favorite(ctx, req.(*DouyinFavoriteActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FavoriteService_FavoriteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DouyinFavoriteListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FavoriteServiceServer).FavoriteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FavoriteService_FavoriteList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FavoriteServiceServer).FavoriteList(ctx, req.(*DouyinFavoriteListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FavoriteService_GetFavoriteCntByVId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFavoriteCntByVIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FavoriteServiceServer).GetFavoriteCntByVId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FavoriteService_GetFavoriteCntByVId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FavoriteServiceServer).GetFavoriteCntByVId(ctx, req.(*GetFavoriteCntByVIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FavoriteService_GetIsFavorite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIsFavoriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FavoriteServiceServer).GetIsFavorite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FavoriteService_GetIsFavorite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FavoriteServiceServer).GetIsFavorite(ctx, req.(*GetIsFavoriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FavoriteService_GetFavoriteCntByUId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFavoriteCntByUIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FavoriteServiceServer).GetFavoriteCntByUId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FavoriteService_GetFavoriteCntByUId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FavoriteServiceServer).GetFavoriteCntByUId(ctx, req.(*GetFavoriteCntByUIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FavoriteService_ServiceDesc is the grpc.ServiceDesc for FavoriteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FavoriteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "favorite.api.favorite.v1.FavoriteService",
	HandlerType: (*FavoriteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Favorite",
			Handler:    _FavoriteService_Favorite_Handler,
		},
		{
			MethodName: "FavoriteList",
			Handler:    _FavoriteService_FavoriteList_Handler,
		},
		{
			MethodName: "GetFavoriteCntByVId",
			Handler:    _FavoriteService_GetFavoriteCntByVId_Handler,
		},
		{
			MethodName: "GetIsFavorite",
			Handler:    _FavoriteService_GetIsFavorite_Handler,
		},
		{
			MethodName: "GetFavoriteCntByUId",
			Handler:    _FavoriteService_GetFavoriteCntByUId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "favorite/v1/favorite.proto",
}
