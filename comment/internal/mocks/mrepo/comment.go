// Code generated by MockGen. DO NOT EDIT.
// Source: comment/internal/biz (interfaces: CommentRepo)

// Package mrepo is a generated GoMock package.
package mrepo

import (
	v1 "comment/api/comment/v1"
	model "comment/internal/pkg/model"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCommentRepo is a mock of CommentRepo interface.
type MockCommentRepo struct {
	ctrl     *gomock.Controller
	recorder *MockCommentRepoMockRecorder
}

// MockCommentRepoMockRecorder is the mock recorder for MockCommentRepo.
type MockCommentRepoMockRecorder struct {
	mock *MockCommentRepo
}

// NewMockCommentRepo creates a new mock instance.
func NewMockCommentRepo(ctrl *gomock.Controller) *MockCommentRepo {
	mock := &MockCommentRepo{ctrl: ctrl}
	mock.recorder = &MockCommentRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommentRepo) EXPECT() *MockCommentRepoMockRecorder {
	return m.recorder
}

// CommentList mocks base method.
func (m *MockCommentRepo) CommentList(arg0 context.Context, arg1 int64) ([]*model.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommentList", arg0, arg1)
	ret0, _ := ret[0].([]*model.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommentList indicates an expected call of CommentList.
func (mr *MockCommentRepoMockRecorder) CommentList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommentList", reflect.TypeOf((*MockCommentRepo)(nil).CommentList), arg0, arg1)
}

// DelComment mocks base method.
func (m *MockCommentRepo) DelComment(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelComment", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelComment indicates an expected call of DelComment.
func (mr *MockCommentRepoMockRecorder) DelComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelComment", reflect.TypeOf((*MockCommentRepo)(nil).DelComment), arg0, arg1)
}

// GetAuthorIdByVId mocks base method.
func (m *MockCommentRepo) GetAuthorIdByVId(arg0 context.Context, arg1 int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorIdByVId", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorIdByVId indicates an expected call of GetAuthorIdByVId.
func (mr *MockCommentRepoMockRecorder) GetAuthorIdByVId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorIdByVId", reflect.TypeOf((*MockCommentRepo)(nil).GetAuthorIdByVId), arg0, arg1)
}

// GetCommentCntByVId mocks base method.
func (m *MockCommentRepo) GetCommentCntByVId(arg0 context.Context, arg1 int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentCntByVId", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentCntByVId indicates an expected call of GetCommentCntByVId.
func (mr *MockCommentRepoMockRecorder) GetCommentCntByVId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentCntByVId", reflect.TypeOf((*MockCommentRepo)(nil).GetCommentCntByVId), arg0, arg1)
}

// GetFollowByUIdAId mocks base method.
func (m *MockCommentRepo) GetFollowByUIdAId(arg0 context.Context, arg1, arg2 int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFollowByUIdAId", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFollowByUIdAId indicates an expected call of GetFollowByUIdAId.
func (mr *MockCommentRepoMockRecorder) GetFollowByUIdAId(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFollowByUIdAId", reflect.TypeOf((*MockCommentRepo)(nil).GetFollowByUIdAId), arg0, arg1, arg2)
}

// GetUserinfoByUId mocks base method.
func (m *MockCommentRepo) GetUserinfoByUId(arg0 context.Context, arg1 int64) (*v1.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserinfoByUId", arg0, arg1)
	ret0, _ := ret[0].(*v1.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserinfoByUId indicates an expected call of GetUserinfoByUId.
func (mr *MockCommentRepoMockRecorder) GetUserinfoByUId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserinfoByUId", reflect.TypeOf((*MockCommentRepo)(nil).GetUserinfoByUId), arg0, arg1)
}

// SaveComment mocks base method.
func (m *MockCommentRepo) SaveComment(arg0 context.Context, arg1 *model.Comment) (*model.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveComment", arg0, arg1)
	ret0, _ := ret[0].(*model.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveComment indicates an expected call of SaveComment.
func (mr *MockCommentRepoMockRecorder) SaveComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveComment", reflect.TypeOf((*MockCommentRepo)(nil).SaveComment), arg0, arg1)
}
